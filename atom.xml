<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stouyx&#39;s blog</title>
  
  <subtitle>keep doing！</subtitle>
  <link href="https://xadmc.gitee.io/stouyx/atom.xml" rel="self"/>
  
  <link href="https://xadmc.gitee.io/stouyx/"/>
  <updated>2023-05-22T07:27:50.909Z</updated>
  <id>https://xadmc.gitee.io/stouyx/</id>
  
  <author>
    <name>Wang Yuxuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>输入一行整数</title>
    <link href="https://xadmc.gitee.io/stouyx/2023/05/22/%E8%BE%93%E5%85%A5%E4%B8%80%E8%A1%8C%E6%95%B4%E6%95%B0/"/>
    <id>https://xadmc.gitee.io/stouyx/2023/05/22/%E8%BE%93%E5%85%A5%E4%B8%80%E8%A1%8C%E6%95%B4%E6%95%B0/</id>
    <published>2023-05-22T07:25:19.000Z</published>
    <updated>2023-05-22T07:27:50.909Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int num;</span><br><span class="line">int m[10000];</span><br><span class="line">int i=0;</span><br><span class="line">while (cin &gt;&gt; num) &#123;</span><br><span class="line">     m[i]=num;</span><br><span class="line">     i++;</span><br><span class="line">     if (cin.get() == &#x27;\n&#x27;) &#123;</span><br><span class="line">         break;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体深入理解cin函数</p>]]></content>
    
    
    <summary type="html">输入一行整数，如何自动生成int数组</summary>
    
    
    
    <category term="语法" scheme="https://xadmc.gitee.io/stouyx/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="C++" scheme="https://xadmc.gitee.io/stouyx/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Mac软件无法打开</title>
    <link href="https://xadmc.gitee.io/stouyx/2023/05/20/Mac%E8%BD%AF%E4%BB%B6%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/"/>
    <id>https://xadmc.gitee.io/stouyx/2023/05/20/Mac%E8%BD%AF%E4%BB%B6%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/</id>
    <published>2023-05-20T14:04:49.000Z</published>
    <updated>2023-05-20T14:36:18.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见的三种报错方式"><a href="#常见的三种报错方式" class="headerlink" title="常见的三种报错方式"></a>常见的三种报错方式</h2><p>xxx已损坏，无法打开，你应该将它移到废纸篓解决办法<br>打不开 xxx，因为它来自身份不明的开发者<br>打不开xxxx，因为 Apple 无法检查其是否包含恶意软件</p><h2 id="解决方案一"><a href="#解决方案一" class="headerlink" title="解决方案一"></a>解决方案一</h2><p>1.打开系统设置<br>2.点击左侧边栏的隐私与安全性<br>3.在下方找到安全性，选择允许从任何来源下载应用程序</p><img src="https://www.helloimg.com/images/2023/05/20/oEU1Vr.png" width="60%" height="90%"><p>假如你不想找的话，可以在终端中输入指令完成此操作<br>在终端中输入【sudo spctl –master-disable】</p><img src="https://s1.imagehub.cc/images/2023/05/20/18001684592389_.pic.png" width="80%" height="60%"><p>多数情况下这种方法可以解决<br>在打开新文件的时候，依旧有弹窗<br>再次打开隐私与安全，能够找到是否打开该程序的按钮，点击打开即可</p><h2 id="解决方案二"><a href="#解决方案二" class="headerlink" title="解决方案二"></a>解决方案二</h2><p>通过终端执行命令行代码来绕过应用签名认证<br>打开终端，输入以下命令：<br>sudo xattr -rd com.apple.quarantine &#x2F;Applications&#x2F;xxxxxx.app</p><p>将上面的 xxxxxx.app 换成你的App名称，比如 dev-sidecar.app</p><p>sudo xattr -rd com.apple.quarantine &#x2F;Applications&#x2F;dev-sidecar.app</p><p>假如你对App路径不熟悉你可以用以下办法：</p><p>1.复制以下命令粘贴到终端</p><p>sudo xattr -rd com.apple.quarantine </p><p>2.打开访达，点击左侧的应用程序，将应用拖进终端中，此时会在终端中自动生成App路径，然后按键盘的回车键，输入密码，再按回车键，完成。</p><img src="https://s1.imagehub.cc/images/2023/05/20/18011684592766_.pic_hd.png" width="90%" height="50%"><p>注意： quarantine 与后面的&#x2F;之间必须有个空格</p>]]></content>
    
    
    <summary type="html">无法打开Mac上的软件解决方案</summary>
    
    
    
    <category term="语法" scheme="https://xadmc.gitee.io/stouyx/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="C++" scheme="https://xadmc.gitee.io/stouyx/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>this指针</title>
    <link href="https://xadmc.gitee.io/stouyx/2023/05/15/this%E6%8C%87%E9%92%88/"/>
    <id>https://xadmc.gitee.io/stouyx/2023/05/15/this%E6%8C%87%E9%92%88/</id>
    <published>2023-05-15T08:23:15.000Z</published>
    <updated>2023-05-20T14:37:31.352Z</updated>
    
    <content type="html"><![CDATA[<p>成员函数调用本身时用this指针</p><img src="https://s1.imagehub.cc/images/2023/05/15/image10d895e6d4e49f3a.png" width="90%" height="40%"><p>当构造函数中的形参与数据成员重名时必须用this指针</p><img src="https://s1.imagehub.cc/images/2023/05/15/image89ba83e49e0238b7.png" width="90%" height="40%">]]></content>
    
    
    <summary type="html">this指针应用情况</summary>
    
    
    
    <category term="语法" scheme="https://xadmc.gitee.io/stouyx/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="C++" scheme="https://xadmc.gitee.io/stouyx/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>指向基类的指针</title>
    <link href="https://xadmc.gitee.io/stouyx/2023/05/15/%E6%8C%87%E5%90%91%E5%9F%BA%E7%B1%BB%E7%9A%84%E6%8C%87%E9%92%88/"/>
    <id>https://xadmc.gitee.io/stouyx/2023/05/15/%E6%8C%87%E5%90%91%E5%9F%BA%E7%B1%BB%E7%9A%84%E6%8C%87%E9%92%88/</id>
    <published>2023-05-15T08:21:24.000Z</published>
    <updated>2023-05-20T14:36:45.397Z</updated>
    
    <content type="html"><![CDATA[<p>指向基类的指针可以指向子类<br>animal *p;(基类)<br>monkey c;(子类)<br>p&#x3D;&amp;c;</p><p>如果子类覆盖了基类的成员，但是通过基类指针所访问的成员仍是基类的成员，而不是子类的成员</p><p>当指向子类的基类指针调用被覆盖了的成员时，假如基类中的被覆盖成员为虚函数，则调用子类中的成员，如果其不是虚函数，则调用基类中的成员。</p>]]></content>
    
    
    <summary type="html">对指向基类的指针进行解释</summary>
    
    
    
    <category term="语法" scheme="https://xadmc.gitee.io/stouyx/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="C++" scheme="https://xadmc.gitee.io/stouyx/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>基本引用</title>
    <link href="https://xadmc.gitee.io/stouyx/2023/05/15/%E5%9F%BA%E6%9C%AC%E5%BC%95%E7%94%A8/"/>
    <id>https://xadmc.gitee.io/stouyx/2023/05/15/%E5%9F%BA%E6%9C%AC%E5%BC%95%E7%94%A8/</id>
    <published>2023-05-15T08:17:31.000Z</published>
    <updated>2023-05-20T14:37:05.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实际上是起别名"><a href="#实际上是起别名" class="headerlink" title="实际上是起别名"></a>实际上是起别名</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int a=1001;</span><br><span class="line">int &amp;b = a;</span><br><span class="line">b=1002</span><br><span class="line">cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">//输出为1002；</span><br></pre></td></tr></table></figure><h2 id="用在形参："><a href="#用在形参：" class="headerlink" title="用在形参："></a>用在形参：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void change(int &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">b=1003;</span><br><span class="line">&#125;</span><br><span class="line">int a=1001;</span><br><span class="line">change(a);</span><br><span class="line">cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">//输出为1003；</span><br></pre></td></tr></table></figure><h2 id="用于类"><a href="#用于类" class="headerlink" title="用于类"></a>用于类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class mm</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">string&amp; getname()</span><br><span class="line">&#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">protected:</span><br><span class="line">string name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mm a;</span><br><span class="line">a.getname()=&quot;Tom&quot;</span><br><span class="line">//此时a中的name 为Tom</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">三种基本引用类型</summary>
    
    
    
    <category term="语法" scheme="https://xadmc.gitee.io/stouyx/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="C++" scheme="https://xadmc.gitee.io/stouyx/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>虚函数</title>
    <link href="https://xadmc.gitee.io/stouyx/2023/05/15/%E8%99%9A%E5%87%BD%E6%95%B0/"/>
    <id>https://xadmc.gitee.io/stouyx/2023/05/15/%E8%99%9A%E5%87%BD%E6%95%B0/</id>
    <published>2023-05-15T08:12:09.000Z</published>
    <updated>2023-05-20T14:37:15.954Z</updated>
    
    <content type="html"><![CDATA[<p>C++中的虚函数是用于实现多态性的一种机制。虚函数可以在基类中声明并在派生类中重写，当通过基类指针或引用调用虚函数时，实际调用的是派生类中的实现，这种行为被称为动态绑定。</p><h2 id="虚函数的作用"><a href="#虚函数的作用" class="headerlink" title="虚函数的作用"></a>虚函数的作用</h2><p>允许派生类重写基类中定义的函数。在基类中声明虚函数，如果派生类中有同名函数并且使用了关键字 virtual 进行了声明，那么这个函数就是虚函数，可以被派生类重写。<br>实现动态绑定。如果使用基类指针或引用调用虚函数，实际上调用的是指向对象的实际类型所实现的版本，而不是基类中的版本。这使得程序能够以一种更加灵活的方式使用对象，可以在运行时动态地确定调用哪个函数。<br>虚函数的应用广泛，特别是在面向对象程序设计中，常常被用来实现多态性和基于接口的编程，提高了程序的可扩展性和可维护性。<br>虚函数用于弥补覆盖的缺陷<br>对函数进行覆盖后，在基类中调用覆盖后的函数还是会调用基类中的函数，<br>但是当基类中的函数为虚函数，那么将调用子类中的覆盖后的函数</p><h2 id="虚函数的定义"><a href="#虚函数的定义" class="headerlink" title="虚函数的定义"></a>虚函数的定义</h2><p>在实现c++多态时会用到虚函数。虚函数使用的其核心目的是通过基类访问派生类定义的函数。所谓虚函数就是在基类定义一个未实现的函数名，为了提高程序的可读性，建议后代中虚函数都加上virtual关键字。一般格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class base</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"> base();</span><br><span class="line"> virtual void test(); //定义的一个虚函数</span><br><span class="line">private:</span><br><span class="line"> char *basePStr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上述代码在基类中定义了一个test的虚函数，所有可以在其子类重新定义父类的做法这种行为成为覆盖（override）,或者为重写。</p><p>常见用法：声明基类指针，利用指针指向任意一个子类对象，调用相关的虚函数，动态绑定，由于编写代码时不能确定被调用的是基类函数还是那个派生类函数，所以被称为“”虚“”函数。如果没有使用虚函数的话，即没有利用C++多态性，则利用基类指针调用相应的函数的时候，将总被限制在基类函数本身，而无法调用到子类中被重写过的函数。</p><h2 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h2><p>定义：</p><p>纯虚函数是在基类中声明的虚函数，它在基类中没有定义，但要求任何派生类都要定义自己的实现方法。在基类中实现纯虚函数的方法是在函数原型后加 &#x3D;0:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtual void funtion1()=0</span><br></pre></td></tr></table></figure><p>在很多情况下，基类本身生成对象是不合情理的。例如，动物作为一个基类可以派生出老虎、孔雀等子类，但动物本身生成对象明显不合常理。</p><p>为了解决上述问题，引入了纯虚函数的概念，将函数定义为纯虚函数（方法：virtual ReturnType Function()&#x3D; 0;），则编译器要求在派生类中必须予以重写以实现多态性。同时含有纯虚拟函数的类称为抽象类，它不能生成对象。这样就很好地解决了上述两个问题。</p><p>声明了纯虚函数的类是一个抽象类。所以，用户不能创建类的实例，只能创建它的派生类的实例。</p><p>纯虚函数最显著的特征是：它们必须在继承类中重新声明函数（不要后面的＝0，否则该派生类也不能实例化），而且它们在抽象类中往往没有定义。</p><p>定义纯虚函数的目的在于，使派生类仅仅只是继承函数的接口。</p>]]></content>
    
    
    <summary type="html">虚函数详解</summary>
    
    
    
    <category term="语法" scheme="https://xadmc.gitee.io/stouyx/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="C++" scheme="https://xadmc.gitee.io/stouyx/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>继承</title>
    <link href="https://xadmc.gitee.io/stouyx/2023/05/15/%E7%BB%A7%E6%89%BF/"/>
    <id>https://xadmc.gitee.io/stouyx/2023/05/15/%E7%BB%A7%E6%89%BF/</id>
    <published>2023-05-15T07:54:19.000Z</published>
    <updated>2023-05-15T08:09:07.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><p>当我们编写一个类时，发现这个类与类外一个类的成员变量和成员方法相似，并且具有一定的包含关系时，我们编写的这两个类会有很多相似的地方。</p><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>继承机制是面向对象程序设计使代码可以复用的重要手段。它允许程序员在保持原有类特性的基础上进行扩展，增加功能，这样产生的类称为派生类。</p><p>继承呈现了面向对象程序设计的层次结构，体现了由简单到复杂的认知过程。以前我们接触的复用都是函数复用，继承使类设计层次的复用。</p><p>简单来说就是，继承就是一个类复用了另外一个类的成员函数和成员变量。就好像在这个类里编写了另外一个类的成员。</p><img src="https://www.helloimg.com/images/2023/05/15/oEb7F9.png" width="90%" height="50%"><img src="https://www.helloimg.com/images/2023/05/15/oEbDnX.png" width="90%" height="50%"><img src="https://www.helloimg.com/images/2023/05/15/oEbIzg.png" width="90%" height="30%"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基类的私有成员在派生类中不可以见，基类的其它成员在派生类中的访问方式是：继承方式和基类该成员访问限定符范围那个小，就是什么访问方式，等价于min(继承方式，基类该成员访问限定符)。范围从大到小：public &gt; protected &gt; private</p><p>基类的private成员，无论以什么继承方式继承，在派生类里是不可以访问的。但是，派生类还是继承了基类，只是在语法上限制了派生类在类里或者类外对基类私有成员的访问。</p><p>基类protected成员，通过public或者protected继承方式继承的派生类，该成员变成了派生类的protected成员，只能在类里访问，不能在类外访问。但是基类的private成员，派生类不可见，在继承中体现了两者的区别。可以看出保护成员限定符因继承才出现的。</p><p>使用关键字class定义的类的默认继承方式是private，使用关键字struct定义的类的默认继承方式是public，但是，最后显示写出继承方式。<br>在实际运用中一般使用public继承，很少用protected和private继承。因为protected和private继承下来的成员只能在派生类中使用，实用性不强。</p><h2 id="基类和派生类对象的赋值转化"><a href="#基类和派生类对象的赋值转化" class="headerlink" title="基类和派生类对象的赋值转化"></a>基类和派生类对象的赋值转化</h2><p>派生类可以给基类赋值<br>派生类对象可以赋值给基类对象&#x2F;基类指针&#x2F;基类引用。这里有一个形象的说法是切片或者切割，意思是将派生类父类中的那部分切来赋值过去。</p><img src="https://www.helloimg.com/images/2023/05/15/oEbKtP.png" width="90%" height="80%"><img src="https://www.helloimg.com/images/2023/05/15/oEbUv6.png" width="90%" height="30%"><p>基类对象不能赋值给派生类对象。因为基类对象中可能没有派生类中的成员，所以赋值不过去。<br>但是当一个基类指针指向派生类时，可以通过强制类型转化赋值给派生类指针。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">protected:</span><br><span class="line">string _name; // 姓名</span><br><span class="line">string _sex; // 性别</span><br><span class="line">int _age; // 年龄</span><br><span class="line">&#125;;</span><br><span class="line">class Student : public Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">int _No; // 学号</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">void Test()</span><br><span class="line">&#123;</span><br><span class="line">Student s;</span><br><span class="line">// 1.子类对象可以赋值给父类对象/指针/引用</span><br><span class="line">Person p1 = s;</span><br><span class="line">Person* pp = &amp;s;</span><br><span class="line">Person&amp; rp = s;</span><br><span class="line"> </span><br><span class="line">//2.基类对象不能赋值给派生类对象，会报错</span><br><span class="line">s = p1;</span><br><span class="line"> </span><br><span class="line">// 3.基类的指针可以通过强制类型转换赋值给派生类的指针</span><br><span class="line">    //前提，指向基类指针指向派生类</span><br><span class="line">pp = &amp;s;</span><br><span class="line">Student* ps1 = (Student*)pp; // 这种情况转换时可以的。</span><br><span class="line">ps1-&gt;_No = 10;</span><br><span class="line">//基类指针指向基类的话</span><br><span class="line">pp = &amp;p1;</span><br><span class="line">Student* ps2 = (Student*)pp; // 这种情况转换时虽然可以，但是会存在越界访问的问题，</span><br><span class="line">//由于基类中没有_NO成员，访问会越界</span><br><span class="line">ps2-&gt;_No = 10;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承中的作用域"><a href="#继承中的作用域" class="headerlink" title="继承中的作用域"></a>继承中的作用域</h2><p>在继承体系中基类和派生类具有独立的作用域。</p><p>派生类和基类具有同名成员(成员变量和成员函数)时，派生类将屏蔽对父类同名成员的直接访问，这种情况叫隐藏(重定义)。除非指定作用域：基类名 : : 基类成员 (显示访问)</p><img src="https://www.helloimg.com/images/2023/05/15/oEbgfn.png" width="90%" height="40%"><p>如果基类与派生类有同名函数，那么基类的同名函数将会被隐藏，在调用函数的时候，基类函数无法被调用，只能调用派生类的函数（传参不同也不可，函数隐藏不同于函数重载）</p><img src="https://www.helloimg.com/images/2023/05/15/oEbrqR.png" width="60%" height="60%"><img src="https://www.helloimg.com/images/2023/05/15/oEbVTz.png" width="90%" height="40%"><p>注意：在实际的继承体系同最好不要定义同名成员。</p><h2 id="构造函数："><a href="#构造函数：" class="headerlink" title="构造函数："></a>构造函数：</h2><p>派生类的构造函数必须去调用基类的构造函数去初始化基类的那一部分成员。如果基类没有默认构造函数(无参，全缺省或者编译器生成)，必须在派生类构造函数中显示调用基类的构造函数。<br>有参数的子类构造函数必须调用父类构造函数<br>&lt;子类名&gt;::&lt;子类名&gt;(参数列表):父类名(参数列表)<br>{<br>    成员&#x3D;形参<br>}</p><h2 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h2><p>派生类的拷贝构造函数必须调用基类的拷贝构造函数完成属于基类成员的拷贝构造。</p><p>派生类的赋值操作符重载函数(operator&#x3D;)必须调用基类的赋值操作符重载函数(operator&#x3D;)赋值属于基类的成员。<br>注意：在派生类里调用基类的赋值重载函数要加类作用域限定符。</p><img src="https://www.helloimg.com/images/2023/05/15/oEbYUA.png" width="90%" height="40%"><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><p>派生类先调用基类的构造，再调用派生类的构造。<br>派生类对象析构，先调用派生类的析构，再调用基类的析构。</p><h2 id="继承与友元"><a href="#继承与友元" class="headerlink" title="继承与友元"></a>继承与友元</h2><p>基类友元的关系，派生类不能继承下来。也就是说基类的友元不能访问派生类的私有和保护成员。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class Student;//声明</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">friend void Print(Person&amp; p, Student&amp; s);//友元</span><br><span class="line">protected:</span><br><span class="line">string _name = &quot;tom&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">class Student :public Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    //friend void Print(Person&amp; p, Student&amp; s);解决</span><br><span class="line">protected:</span><br><span class="line">int _age = 10;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">void Print(Person&amp; p, Student&amp; s)&#123;</span><br><span class="line">cout &lt;&lt; p._name &lt;&lt; endl;</span><br><span class="line">//cout &lt;&lt; s._age &lt;&lt; endl;</span><br><span class="line">//报错，友元不能继承，不能访问派生类的保护成员</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Person p;</span><br><span class="line">Student s;</span><br><span class="line">Print(p, s);</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承与静态成员"><a href="#继承与静态成员" class="headerlink" title="继承与静态成员"></a>继承与静态成员</h2><p> 基类定义了一个静态成员，在继承体系中，只有这一个成员。也就是说，无论派生了多少派生类，操作的这个静态成员都是一个成员。</p><img src="https://www.helloimg.com/images/2023/05/15/oEbhP5.png" width="40%" height="100%"><img src="https://s1.imagehub.cc/images/2023/05/15/image.png" width="90%" height="40%">]]></content>
    
    
    <summary type="html">构造函数详解</summary>
    
    
    
    <category term="语法" scheme="https://xadmc.gitee.io/stouyx/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="C++" scheme="https://xadmc.gitee.io/stouyx/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>构造函数</title>
    <link href="https://xadmc.gitee.io/stouyx/2023/05/09/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>https://xadmc.gitee.io/stouyx/2023/05/09/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</id>
    <published>2023-05-09T08:38:33.000Z</published>
    <updated>2023-05-11T04:29:36.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么需要构造函数"><a href="#为什么需要构造函数" class="headerlink" title="为什么需要构造函数"></a>为什么需要构造函数</h2><img src="https://www.helloimg.com/images/2023/05/09/oxnHQ6.png" width="60%" height="70%"><p>每次需要调用SetDate函数<br>十分麻烦<br>此时需要构造函数来出👋</p><h2 id="构造函数的概念特征"><a href="#构造函数的概念特征" class="headerlink" title="构造函数的概念特征"></a>构造函数的概念特征</h2><p>能够保证对象被初始化。<br>构造函数是特殊的成员函数，主要任务是初始化，而不是开空间。（虽然构造函数的名字叫构造）<br>构造函数是特殊的成员函数，主要特征如下：<br>① 构造函数的函数名和类名是相同的<br>② 构造函数无返回值<br>③ 构造函数可以重载<br>③ 会在对象实例化时自动调用对象定义出来。</p><img src="https://www.helloimg.com/images/2023/05/09/oxnbyn.png" width="70%" height="80%"><img src="https://www.helloimg.com/images/2023/05/09/oxnMmR.png" width="100%" height="20%"><p>不给参数时就会调用无参构造函数，给参数则会调用带参构造函数<br>！！！！<br>注意事项：<br>① 构造函数是特殊的，不是常规的成员函数，不能直接调 </p><p>d1.Date();</p><p>② 如果通过无参构造函数创建对象，对象后面不用跟括号，否则就成了函数声明。</p><img src="https://www.helloimg.com/images/2023/05/09/oxn2cz.png" width="70%" height="80%"><p>③ 这里如果调用带参构造函数，我们需要传递三个参数（这里我们没设缺省） 。<br>④ 如果你没有自己定义构造函数（类中未显式定义），C++ 编译器会自动生成一个无参的默认构造函数。当然，如果你自己定义了，编译器就不会帮你生成了。<br><img src="https://www.helloimg.com/images/2023/05/09/oxnTVA.png" width="60%" height="80%"></p><p>输出：</p><img src="https://www.helloimg.com/images/2023/05/09/oxn9X5.png" width="80%" height="20%"><h2 id="默认构造函数："><a href="#默认构造函数：" class="headerlink" title="默认构造函数："></a>默认构造函数：</h2><p>任何一个类的默认构造函数，只有三种：<br>① 无参的构造函数<br>② 全缺省的构造函数<br>③ 我们不写，编译器自己生成的构造函数<br>并且默认构造函数只能有一个！<br>注意事项：<br>① 无参构造函数、全缺省构造函数、我们没写编译器默认生成的无参构造函数，都可以认为是默认成员函数。<br>② 语法上无参和全缺省可以同时存在，但如果同时存在会引发二义性：<br>可以同时存在，但是不能调用构造函数否则报错</p><p>无参构造函数，全缺省构造函数：</p><img src="https://www.helloimg.com/images/2023/05/09/oxnc8m.png" width="70%" height="40%"><p>举例：</p><img src="https://s1.imagehub.cc/images/2023/05/09/image.png" width="70%" height="80%"><img src="https://www.helloimg.com/images/2023/05/09/oxnsrY.png" width="70%" height="80%">]]></content>
    
    
    <summary type="html">构造函数详解</summary>
    
    
    
    <category term="语法" scheme="https://xadmc.gitee.io/stouyx/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="C++" scheme="https://xadmc.gitee.io/stouyx/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>隐藏重载覆盖</title>
    <link href="https://xadmc.gitee.io/stouyx/2023/05/09/%E9%9A%90%E8%97%8F%E9%87%8D%E8%BD%BD%E8%A6%86%E7%9B%96/"/>
    <id>https://xadmc.gitee.io/stouyx/2023/05/09/%E9%9A%90%E8%97%8F%E9%87%8D%E8%BD%BD%E8%A6%86%E7%9B%96/</id>
    <published>2023-05-09T02:04:03.000Z</published>
    <updated>2023-05-11T04:29:30.579Z</updated>
    
    <content type="html"><![CDATA[<p>存在父子类继承关系时，若有同名成员函数同时存在，会发生隐藏、覆盖和重载这几种情况。</p><h2 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h2><p>子类对象优先考虑子类域自身成员（成员变量和成员函数）<br>    隐藏发生的主要原因，就是当子类有父类的同名成员时，子类对象访问该成员时，会发生冲突。所以编译器的处理方式是，优先考虑子类域中的自身成员。即，子类对象访问某成员时，如ch.m_m 或者ch.f(),成员变量和成员函数都一样。编译器首先在子类域中检索，如果在子类域中找到该成员，则检索结束，返回该成员进行访问。如果在子类域中找不到该成员，则去父类域中检索。如果父类域中存在，则返回该成员进行访问，如果父类域中也不存在，则编译错误，该成员无效。</p><p>  当父子类域都存在同一成员时，编译器优先在子类中检索，就算父类域中也存在该同名成员，也不会被检索到。因此，父类域中的该成员被子类域中的该同名成员隐藏，即访问时完全以为该成员不存在，如果想访问父类域中的该成员，只能通过显示调用的方式，即：ch.Father::m_m;<br>重载：相同域的同名不同参函数</p><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>　　<br>　　重载必须是发生在同一个域中的两个同名不同形参之间的。如果一个在父类域一个在子类域，是不会存在重载的，属于隐藏的情况。调用时，只会在子类域中搜索，如果形参不符合，会认为没有该函数，而不会去父类域中搜索。<br>覆盖是指派生类函数覆盖基类函数，特征是：<br>（1）不同的范围（分别位于派生类与基类）；<br>（2）函数名字相同；<br>（3）参数相同；<br>（4）基类函数必须有virtual 关键字。<br>令人迷惑的隐藏规则<br>本来仅仅区别重载与覆盖并不算困难，但是C++的隐藏规则使问题复杂性陡然增加。<br>这里“隐藏”是指派生类的函数屏蔽了与其同名的基类函数，规则如下：<br>（1）如果派生类的函数与基类的函数同名，但是参数不同。此时，不论有无virtual<br>关键字，基类的函数将被隐藏（注意别与重载混淆）。<br>（2）如果派生类的函数与基类的函数同名，并且参数也相同，但是基类函数没有virtual<br>关键字。此时，基类的函数被隐藏（注意别与覆盖混淆）。</p>]]></content>
    
    
    <summary type="html">对隐藏覆盖重载进行区分</summary>
    
    
    
    <category term="语法" scheme="https://xadmc.gitee.io/stouyx/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="C++" scheme="https://xadmc.gitee.io/stouyx/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>停车场管理系统</title>
    <link href="https://xadmc.gitee.io/stouyx/2023/05/08/%E5%81%9C%E8%BD%A6%E5%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://xadmc.gitee.io/stouyx/2023/05/08/%E5%81%9C%E8%BD%A6%E5%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-05-08T15:58:02.000Z</published>
    <updated>2023-05-11T04:29:23.247Z</updated>
    
    <content type="html"><![CDATA[<p>系统演示视频：<a href="https://b23.tv/2scBrDx">🔗</a><br>源代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br></pre></td><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#pragma warning( disable : 4992)</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;ctime&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;fstream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class chang</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int car_sum;</span><br><span class="line">    int electric_sum;</span><br><span class="line">    int truck_sum;</span><br><span class="line">    int car_price;</span><br><span class="line">    int electric_price;</span><br><span class="line">    int truck_price;</span><br><span class="line">    chang()</span><br><span class="line">    &#123;</span><br><span class="line">        car_sum=0;</span><br><span class="line">        electric_sum=0;</span><br><span class="line">        truck_sum=0;</span><br><span class="line">        car_price=0;</span><br><span class="line">        electric_price=0;</span><br><span class="line">        truck_price=0;</span><br><span class="line">    &#125;</span><br><span class="line">    chang(int a,int b,int c,int d,int e,int f)</span><br><span class="line">    &#123;</span><br><span class="line">        car_sum=a;</span><br><span class="line">        electric_sum=b;</span><br><span class="line">        truck_sum=c;</span><br><span class="line">        car_price=d;</span><br><span class="line">        electric_price=e;</span><br><span class="line">        truck_price=f;</span><br><span class="line">    &#125;</span><br><span class="line">    friend ostream &amp; operator&lt;&lt;(ostream &amp; cout, const chang &amp; st);</span><br><span class="line">&#125;;</span><br><span class="line">ostream &amp; operator&lt;&lt;(ostream &amp; cout, const chang &amp;st)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;&quot;小轿车总数：&quot;&lt;&lt;st.car_sum&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;电动车总数：&quot;&lt;&lt;st.electric_sum&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;货车总数：&quot;&lt;&lt;st.truck_sum&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;小轿车停车价格：&quot;&lt;&lt;st.car_price&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;电动车停车价格：&quot;&lt;&lt;st.electric_price&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;货车停车价格：&quot;&lt;&lt;st.truck_price&lt;&lt;endl;</span><br><span class="line">    return cout;</span><br><span class="line">&#125;</span><br><span class="line">class Time</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int year;</span><br><span class="line">    int month;</span><br><span class="line">    int day;</span><br><span class="line">    int hour;</span><br><span class="line">    int min;</span><br><span class="line">    Time(int _year=0, int _month=0, int _day=0, int _hour=0, int _min=0)</span><br><span class="line">    &#123;</span><br><span class="line">        year = _year;</span><br><span class="line">        month = _month;</span><br><span class="line">        day = _day;</span><br><span class="line">        hour = _hour;</span><br><span class="line">        min = _min;</span><br><span class="line">    &#125;</span><br><span class="line">    void print()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; year &lt;&lt; &quot;年&quot; &lt;&lt; month &lt;&lt; &quot;月&quot; &lt;&lt; day &lt;&lt; &quot;日&quot; &lt;&lt; hour &lt;&lt; &quot;时&quot; &lt;&lt; min &lt;&lt; &quot;分&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    friend ostream &amp; operator&lt;&lt;(ostream &amp; cout, const Time &amp; st);</span><br><span class="line">&#125;;</span><br><span class="line">ostream &amp; operator&lt;&lt;(ostream &amp; cout, const Time &amp; st)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; st.year &lt;&lt; &quot;年&quot; &lt;&lt; st.month &lt;&lt; &quot;月&quot; &lt;&lt; st.day &lt;&lt; &quot;日&quot; &lt;&lt; st.hour &lt;&lt; &quot;时&quot; &lt;&lt; st.min &lt;&lt; &quot;分&quot; &lt;&lt; endl;</span><br><span class="line">    return cout;</span><br><span class="line">&#125;</span><br><span class="line">class park</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    Time t;</span><br><span class="line">    int type;</span><br><span class="line">    int chewei;//车位号</span><br><span class="line">    char chepai[5];//车牌号</span><br><span class="line">    bool condition;</span><br><span class="line">    park(Time _t,int _type,int a,char* c, bool b)</span><br><span class="line">    &#123;</span><br><span class="line">        t=_t;</span><br><span class="line">        type = _type;</span><br><span class="line">        chewei = a;</span><br><span class="line">        condition = false;</span><br><span class="line">        strcpy(chepai, c);</span><br><span class="line">    &#125;</span><br><span class="line">    park()</span><br><span class="line">    &#123;</span><br><span class="line">        chepai[0]=&#x27;\0&#x27;;</span><br><span class="line">        type=0;</span><br><span class="line">        chewei=0;</span><br><span class="line">        condition = false;</span><br><span class="line">    &#125;</span><br><span class="line">    void print()</span><br><span class="line">    &#123;</span><br><span class="line">        if(type==1)&#123;</span><br><span class="line">            cout&lt;&lt;&quot;轿车&quot;&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        if(type==2)&#123;</span><br><span class="line">            cout&lt;&lt;&quot;电动车&quot;&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        if(type==3)&#123;</span><br><span class="line">            cout&lt;&lt;&quot;货车&quot;&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;&quot;车位号：&quot;&lt;&lt;chewei&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;&quot;车牌号：&quot;&lt;&lt;chepai&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class vehicle</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    Time t;</span><br><span class="line">    char* car_num;</span><br><span class="line">    bool condition;</span><br><span class="line">    int chewei;</span><br><span class="line">    virtual void in() = 0;</span><br><span class="line">    virtual void out() = 0;</span><br><span class="line">    virtual void print() = 0;</span><br><span class="line">    vehicle(Time _t,char* a,int b ,bool c)</span><br><span class="line">    &#123;</span><br><span class="line">        t = _t;</span><br><span class="line">        strcpy(car_num, a);</span><br><span class="line">        chewei=b;</span><br><span class="line">        condition = c;</span><br><span class="line">    &#125;</span><br><span class="line">    vehicle()</span><br><span class="line">    &#123;</span><br><span class="line">        car_num=0;</span><br><span class="line">        chewei=0;</span><br><span class="line">        condition=false;</span><br><span class="line">    &#125;</span><br><span class="line">    ~vehicle()</span><br><span class="line">    &#123;</span><br><span class="line">        delete []car_num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class electric : public vehicle</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    electric(Time _t, char* a,int b, bool d):vehicle(_t,a,b,d)&#123;&#125;</span><br><span class="line">    electric():vehicle()&#123;&#125;</span><br><span class="line">    virtual void in();</span><br><span class="line">    virtual void out();</span><br><span class="line">    virtual void print();</span><br><span class="line">&#125;;</span><br><span class="line">void electric::in()</span><br><span class="line">&#123;</span><br><span class="line">    condition = true;</span><br><span class="line">&#125;</span><br><span class="line">void electric::out()</span><br><span class="line">&#123;</span><br><span class="line">    condition = false;</span><br><span class="line">&#125;</span><br><span class="line">void electric::print()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; &quot;      电动车&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;车牌号：&quot; &lt;&lt; car_num&lt;&lt;endl;</span><br><span class="line">    if (condition == true) &#123;</span><br><span class="line">        cout &lt;&lt; &quot;是否停在停车场：&quot;;</span><br><span class="line">        cout &lt;&lt; &quot;是&quot; &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; &quot;进入停车场的时间:&quot; &lt;&lt; endl;</span><br><span class="line">        t.print();</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        cout &lt;&lt; &quot;是否停在停车场：&quot;;</span><br><span class="line">        cout &lt;&lt; &quot;否&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class car : public vehicle</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void in();</span><br><span class="line">    virtual void out();</span><br><span class="line">    virtual void print();</span><br><span class="line">    car(Time _t, char* a,int b, bool d):vehicle(_t,a,b,d) &#123;&#125;</span><br><span class="line">    car():vehicle()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">void car::in()</span><br><span class="line">&#123;</span><br><span class="line">    condition = true;</span><br><span class="line">&#125;</span><br><span class="line">void car::out()</span><br><span class="line">&#123;</span><br><span class="line">    condition = false;</span><br><span class="line">&#125;</span><br><span class="line">void car::print()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; &quot;      小轿车&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;车牌号：&quot; &lt;&lt; car_num &lt;&lt; endl;</span><br><span class="line">    if (condition == true) &#123;</span><br><span class="line">        cout &lt;&lt; &quot;是否停在停车场：&quot;;</span><br><span class="line">        cout &lt;&lt; &quot;是&quot; &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; &quot;进入停车场的时间:&quot; &lt;&lt; endl;</span><br><span class="line">        t.print();</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        cout &lt;&lt; &quot;是否停在停车场：&quot;;</span><br><span class="line">        cout &lt;&lt; &quot;否&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class truck : public vehicle</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int load;</span><br><span class="line">    virtual void in();</span><br><span class="line">    virtual void out();</span><br><span class="line">    virtual void print();</span><br><span class="line">    truck(Time _t,char* a, int b,int c, bool d);</span><br><span class="line">    truck():vehicle()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">truck::truck(Time _t, char* a, int b,int c, bool d) : vehicle(_t,a,b, d)</span><br><span class="line">&#123;</span><br><span class="line">    load = c;</span><br><span class="line">&#125;</span><br><span class="line">void truck::in()</span><br><span class="line">&#123;</span><br><span class="line">    condition = true;</span><br><span class="line">&#125;</span><br><span class="line">void truck::out()</span><br><span class="line">&#123;</span><br><span class="line">    condition = false;</span><br><span class="line">&#125;</span><br><span class="line">void truck::print()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; &quot;      货车&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;车牌号：&quot; &lt;&lt; car_num &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;载货量：&quot; &lt;&lt; load &lt;&lt; endl;</span><br><span class="line">    if (condition == true) &#123;</span><br><span class="line">        cout &lt;&lt; &quot;是否停在停车场：&quot;;</span><br><span class="line">        cout &lt;&lt; &quot;是&quot; &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; &quot;进入停车场的时间:&quot; &lt;&lt; endl;</span><br><span class="line">        t.print();</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        cout &lt;&lt; &quot;是否停在停车场：&quot;;</span><br><span class="line">        cout &lt;&lt; &quot;否&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">bool leap_year(int a)</span><br><span class="line">&#123;</span><br><span class="line">    if ((a % 4 == 0 &amp;&amp; a % 100 != 0 )|| a % 400 == 0) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int sum_time(Time a,Time b)//后面是取车前面是停车</span><br><span class="line">&#123;</span><br><span class="line">    int leap_year_num = 0;</span><br><span class="line">    int normal_year_num = 0;</span><br><span class="line">    int day_left=0;</span><br><span class="line">    int day_right = 0;</span><br><span class="line">    int hour_left = 0;</span><br><span class="line">    int hour_right = 0;</span><br><span class="line">    for (int i = a.year+1; i &lt;= b.year; i++) &#123;</span><br><span class="line">        if (leap_year(i)) &#123;</span><br><span class="line">            leap_year_num++;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            normal_year_num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (leap_year(a.year)) &#123;</span><br><span class="line">        if (a.month == 1) &#123;</span><br><span class="line">            day_left = 366 - a.day-1;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 2) &#123;</span><br><span class="line">            day_left = 306 + (29 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 3) &#123;</span><br><span class="line">            day_left = 275 + (31 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 4) &#123;</span><br><span class="line">            day_left = 245 + (30 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 5) &#123;</span><br><span class="line">            day_left = 214 + (31 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 6) &#123;</span><br><span class="line">            day_left = 184 + (30 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 7) &#123;</span><br><span class="line">            day_left = 153 + (31 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 8) &#123;</span><br><span class="line">            day_left = 122 + (31 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 9) &#123;</span><br><span class="line">            day_left = 92 + (30 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 10) &#123;</span><br><span class="line">            day_left = 61 + (31 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 11) &#123;</span><br><span class="line">            day_left = 31 + (30 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 12) &#123;</span><br><span class="line">            day_left = 0 + (31 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        if (a.month == 1) &#123;</span><br><span class="line">            day_left = 365 - a.day - 1;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 2) &#123;</span><br><span class="line">            day_left = 306 + (28 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 3) &#123;</span><br><span class="line">            day_left = 275 + (31 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 4) &#123;</span><br><span class="line">            day_left = 245 + (30 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 5) &#123;</span><br><span class="line">            day_left = 214 + (31 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 6) &#123;</span><br><span class="line">            day_left = 184 + (30 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 7) &#123;</span><br><span class="line">            day_left = 153 + (31 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 8) &#123;</span><br><span class="line">            day_left = 122 + (31 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 9) &#123;</span><br><span class="line">            day_left = 92 + (30 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 10) &#123;</span><br><span class="line">            day_left = 61 + (31 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 11) &#123;</span><br><span class="line">            day_left = 31 + (30 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 12) &#123;</span><br><span class="line">            day_left = 0 + (31 - a.day - 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (leap_year(b.year)) &#123;</span><br><span class="line">        if (a.month == 1) &#123;</span><br><span class="line">            day_right = b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 2) &#123;</span><br><span class="line">            day_right = 31+b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 3) &#123;</span><br><span class="line">            day_right = 60+b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 4) &#123;</span><br><span class="line">            day_right = 91+b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 5) &#123;</span><br><span class="line">            day_right = 121+b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 6) &#123;</span><br><span class="line">            day_right = 152+b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 7) &#123;</span><br><span class="line">            day_right = 182+b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 8) &#123;</span><br><span class="line">            day_right = 213+b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 9) &#123;</span><br><span class="line">            day_right = 244+b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 10) &#123;</span><br><span class="line">            day_right = 274+b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 11) &#123;</span><br><span class="line">            day_right = 305+b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 12) &#123;</span><br><span class="line">            day_right = 335+b.day;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        if (a.month == 1) &#123;</span><br><span class="line">            day_right = b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 2) &#123;</span><br><span class="line">            day_right = 31 + b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 3) &#123;</span><br><span class="line">            day_right = 59 + b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 4) &#123;</span><br><span class="line">            day_right = 90 + b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 5) &#123;</span><br><span class="line">            day_right = 120 + b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 6) &#123;</span><br><span class="line">            day_right = 151 + b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 7) &#123;</span><br><span class="line">            day_right = 181 + b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 8) &#123;</span><br><span class="line">            day_right = 212 + b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 9) &#123;</span><br><span class="line">            day_right = 243 + b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 10) &#123;</span><br><span class="line">            day_right = 273 + b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 11) &#123;</span><br><span class="line">            day_right = 304 + b.day;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a.month == 12) &#123;</span><br><span class="line">            day_right = 334 + b.day;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    hour_left = 24 - a.hour - 1;</span><br><span class="line">    hour_right = b.hour;</span><br><span class="line">    if (a.year == b.year &amp;&amp; a.month == b.month &amp;&amp; a.day == b.day) &#123;</span><br><span class="line">        if (b.min &gt; a.min) &#123;</span><br><span class="line">            return (b.hour - a.hour + 1);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            return (b.hour - a.hour);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        return(8760 * normal_year_num + 8784 * leap_year_num + 24 * day_left + 24 * day_right + hour_left + hour_right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">bool judge_chepai(char* a,char* b)</span><br><span class="line">&#123;</span><br><span class="line">    unsigned long num_a;</span><br><span class="line">    unsigned long num_b;</span><br><span class="line">    num_a=strlen(a);</span><br><span class="line">    num_b=strlen(b);</span><br><span class="line">    if(num_a!=num_b)&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        int flag=0;</span><br><span class="line">        for(int i=0;i&lt;num_a;i++)&#123;</span><br><span class="line">            if(a[i]!=b[i])&#123;</span><br><span class="line">                flag=1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(flag==0)&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int vehicle_kind(char* pai,park* Car,park* Electric ,park* Truck,int a,int b,int c)</span><br><span class="line">&#123;</span><br><span class="line">    int type=0;</span><br><span class="line">    for(int i=0;i&lt;=a;i++)&#123;</span><br><span class="line">        if(judge_chepai(Car[i].chepai,pai))&#123;</span><br><span class="line">            type=1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=0;i&lt;=b;i++)&#123;</span><br><span class="line">        if(Electric[i].chepai==pai)&#123;</span><br><span class="line">            type=2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=0;i&lt;=c;i++)&#123;</span><br><span class="line">        if(Truck[i].chepai==pai)&#123;</span><br><span class="line">            type=3;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return type;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; &quot;    停车场管理系统&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;  (1)初始化停车场&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;  (2)停车&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;  (3)取车&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;  (4)查询车辆&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;  (5)显示停车场信息&quot; &lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; &quot;  (6)系统使用说明&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;  (7)清除数据&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;  (8)退出&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;第一次使用系统请先初始化停车场&quot; &lt;&lt; endl;</span><br><span class="line">    int flag;</span><br><span class="line">    int car_sum=0;</span><br><span class="line">    int electric_sum=0;</span><br><span class="line">    int truck_sum=0;</span><br><span class="line">    int TYPE=0;</span><br><span class="line">    int choose_wei=0;</span><br><span class="line">    char* pai;</span><br><span class="line">    pai=new char[5];</span><br><span class="line">    park* tcc = NULL;</span><br><span class="line">    int wei=0;</span><br><span class="line">    int Load;</span><br><span class="line">    int car_price=0;</span><br><span class="line">    int electric_price=0;</span><br><span class="line">    int truck_price=0;</span><br><span class="line">    while (1) &#123;</span><br><span class="line">        cout &lt;&lt; &quot;请输入您需要的操作类型：&quot; &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; flag;</span><br><span class="line">        if (flag == 1) &#123;</span><br><span class="line">            fstream read;</span><br><span class="line">            fstream write;</span><br><span class="line">            read.open(&quot;chang.dat&quot;,ios::in|ios::binary);</span><br><span class="line">            chang c;</span><br><span class="line">            read.read((char*)&amp;c, sizeof(c));</span><br><span class="line">            if(c.car_sum==0)&#123;</span><br><span class="line">                write.open(&quot;chang.dat&quot;,ios::out|ios::binary);</span><br><span class="line">                cout&lt;&lt;&quot;无存档&quot;&lt;&lt;endl;</span><br><span class="line">                cout &lt;&lt; &quot;请依次输入您停车场轿车，电动车，货车的容量&quot; &lt;&lt; endl;</span><br><span class="line">                cout &lt;&lt; &quot;轿车：&quot; &lt;&lt; endl;</span><br><span class="line">                cin &gt;&gt; car_sum;</span><br><span class="line">                cout &lt;&lt; &quot;电动车：&quot; &lt;&lt; endl;</span><br><span class="line">                cin &gt;&gt; electric_sum;</span><br><span class="line">                cout &lt;&lt; &quot;货车：&quot; &lt;&lt; endl;</span><br><span class="line">                cin &gt;&gt; truck_sum;</span><br><span class="line">                cout &lt;&lt; &quot;您的停车场已经根据轿车，电动车，货车数量编辑好车位号&quot; &lt;&lt; endl;</span><br><span class="line">                //park.type=1轿车2电动车3货车</span><br><span class="line">                cout&lt;&lt;&quot;请输入您的收费标准(元/小时)&quot;&lt;&lt;endl;</span><br><span class="line">                cout &lt;&lt; &quot;轿车&quot; &lt;&lt; endl;</span><br><span class="line">                cin &gt;&gt; car_price;</span><br><span class="line">                cout &lt;&lt; &quot;电动车&quot; &lt;&lt; endl;</span><br><span class="line">                cin &gt;&gt; electric_price;</span><br><span class="line">                cout &lt;&lt; &quot;货车&quot; &lt;&lt; endl;</span><br><span class="line">                cin &gt;&gt; truck_price;</span><br><span class="line">                cout &lt;&lt; &quot;停车场已初始化完成&quot; &lt;&lt; endl;</span><br><span class="line">                chang n;</span><br><span class="line">                n.car_sum=car_sum;</span><br><span class="line">                n.electric_sum=electric_sum;</span><br><span class="line">                n.truck_sum=truck_sum;</span><br><span class="line">                n.car_price=car_price;</span><br><span class="line">                n.electric_price=electric_price;</span><br><span class="line">                n.truck_price=truck_price;</span><br><span class="line">                write.write((char*)&amp;n, sizeof(n));</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                int flag=0;</span><br><span class="line">                cout&lt;&lt;&quot;已有存档，是否使用存档：&quot;&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;&quot;(1)使用存档&quot;&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;&quot;(2)不使用存档&quot;&lt;&lt;endl;</span><br><span class="line">                cin&gt;&gt;flag;</span><br><span class="line">                chang n;</span><br><span class="line">                read.read((char*)&amp;n, sizeof(n));</span><br><span class="line">                if(flag==1)&#123;</span><br><span class="line">                    car_sum=n.car_sum;</span><br><span class="line">                    electric_sum=n.electric_sum;</span><br><span class="line">                    truck_sum=n.truck_sum;</span><br><span class="line">                    car_price=n.car_price;</span><br><span class="line">                    electric_price=n.electric_price;</span><br><span class="line">                    truck_price=n.truck_price;</span><br><span class="line">                    cout &lt;&lt; &quot;停车场已初始化完成&quot; &lt;&lt; endl;</span><br><span class="line">                &#125;</span><br><span class="line">                if(flag==2)&#123;</span><br><span class="line">                    cout &lt;&lt; &quot;请依次输入您停车场轿车，电动车，货车的容量&quot; &lt;&lt; endl;</span><br><span class="line">                    cout &lt;&lt; &quot;轿车：&quot; &lt;&lt; endl;</span><br><span class="line">                    cin &gt;&gt; car_sum;</span><br><span class="line">                    cout &lt;&lt; &quot;电动车：&quot; &lt;&lt; endl;</span><br><span class="line">                    cin &gt;&gt; electric_sum;</span><br><span class="line">                    cout &lt;&lt; &quot;货车：&quot; &lt;&lt; endl;</span><br><span class="line">                    cin &gt;&gt; truck_sum;</span><br><span class="line">                    cout &lt;&lt; &quot;您的停车场已经根据轿车，电动车，货车数量编辑好车位号&quot; &lt;&lt; endl;</span><br><span class="line">                    //park.type=1轿车2电动车3货车</span><br><span class="line">                    cout&lt;&lt;&quot;请输入您的收费标准(元/小时)&quot;&lt;&lt;endl;</span><br><span class="line">                    cout &lt;&lt; &quot;轿车&quot; &lt;&lt; endl;</span><br><span class="line">                    cin &gt;&gt; car_price;</span><br><span class="line">                    cout &lt;&lt; &quot;电动车&quot; &lt;&lt; endl;</span><br><span class="line">                    cin &gt;&gt; electric_price;</span><br><span class="line">                    cout &lt;&lt; &quot;货车&quot; &lt;&lt; endl;</span><br><span class="line">                    cin &gt;&gt; truck_price;</span><br><span class="line">                    cout &lt;&lt; &quot;停车场已初始化完成&quot; &lt;&lt; endl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            tcc=new class park[car_sum+electric_sum+truck_sum];</span><br><span class="line">            for (int i = 0; i &lt; car_sum; i++) &#123;</span><br><span class="line">                tcc[i].type = 1;</span><br><span class="line">                tcc[i].chewei = i;</span><br><span class="line">                tcc[i].chepai[0] = &#x27;\0&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">            for (int i = car_sum; i &lt; car_sum+electric_sum; i++) &#123;</span><br><span class="line">                tcc[i].type = 2;</span><br><span class="line">                tcc[i].chewei = i-car_sum+1;</span><br><span class="line">                tcc[i].chepai[0] = &#x27;\0&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">            for (int i = car_sum+electric_sum; i &lt;car_sum+electric_sum+truck_sum; i++) &#123;</span><br><span class="line">                tcc[i].type = 3;</span><br><span class="line">                tcc[i].chewei = i-car_sum-electric_sum+1;</span><br><span class="line">                tcc[i].chepai[0] = &#x27;\0&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">            chang m(car_sum,electric_sum,truck_sum,car_price,electric_price,truck_price);</span><br><span class="line">            write.write((char*)&amp;m, sizeof(m));</span><br><span class="line">            write.close();</span><br><span class="line">            read.close();</span><br><span class="line">        &#125;</span><br><span class="line">        if(flag==8)&#123;</span><br><span class="line">            exit(0);</span><br><span class="line">        &#125;</span><br><span class="line">        if(flag==6)&#123;</span><br><span class="line">            cout&lt;&lt;&quot;1.初始化停车场：分别输入轿车电动车货车的数量，为其依次分配停车场位置，并编号，分别设置停不同车的停车场停车的价格。2.停车：输入想要停的车的类型，并输入想要停入的车位号，如果该车位有车则会提示该车位有车，如果该车位无车，则可以停入，并把该车的信息录入文件。3.取车：根据车牌号检索汽车的位置，能够自动读取系统时间与进入停车场的时间，自动进行计算，显示停车时长，删除该车的信息，显示停车过程的价格。4.查询：分为两种查询途径，第一种为按车牌号查找，第二种为按车位号查找，分别取出停车场信息，然后遍历查找，显示其详细信息。5.显示停车场信息：显示当前停车场的各种车辆车位数与停车数。6.帮助：显示该系统的使用帮助。7.清除数据：分为两种操作，第一种为重置该停车场的基础信息，第二种为清除所有停车场中的车辆信息。8.退出：退出该系统。&quot;&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        if(car_sum==0)&#123;</span><br><span class="line">            cout&lt;&lt;&quot;未完成初始化，请先对停车场进行初始化&quot;&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            if (flag == 2) &#123;</span><br><span class="line">                fstream write;</span><br><span class="line">                write.open(&quot;park.dat&quot;, ios::app | ios::binary);</span><br><span class="line">                if (!write) &#123;</span><br><span class="line">                    cout &lt;&lt; &quot;error!&quot; &lt;&lt; endl;</span><br><span class="line">                    exit(0);</span><br><span class="line">                &#125;</span><br><span class="line">                time_t nowtime;</span><br><span class="line">                struct tm* p;</span><br><span class="line">                time(&amp;nowtime);</span><br><span class="line">                p = localtime(&amp;nowtime);</span><br><span class="line">                cout &lt;&lt; &quot;请输入您车的类型&quot; &lt;&lt; endl;</span><br><span class="line">                cout &lt;&lt; &quot;(1)轿车(2)电动车(3)货车&quot; &lt;&lt; endl;</span><br><span class="line">                cin &gt;&gt; TYPE;</span><br><span class="line">                Time a(p-&gt;tm_year+1900,p-&gt;tm_mon+1,p-&gt;tm_mday,p-&gt;tm_hour,p-&gt;tm_min);</span><br><span class="line">                if (TYPE == 1) &#123;</span><br><span class="line">                    int h = 0;</span><br><span class="line">                    cout&lt;&lt;&quot;轿车的停车价格为：&quot;&lt;&lt;car_price&lt;&lt;&quot;元/小时&quot;&lt;&lt;endl;</span><br><span class="line">                    while (h == 0) &#123;</span><br><span class="line">                        cout &lt;&lt; &quot;请在0-&quot; &lt;&lt; car_sum &lt;&lt; &quot;之间选择您的车位号&quot; &lt;&lt; endl;</span><br><span class="line">                        cin &gt;&gt; choose_wei;</span><br><span class="line">                        if (tcc[choose_wei-1].chepai[0]==&#x27;\0&#x27;) &#123;</span><br><span class="line">                            h = 1;</span><br><span class="line">                            cout &lt;&lt; &quot;请输入您的车牌号(4位数字)：&quot; &lt;&lt; endl;</span><br><span class="line">                            string p;</span><br><span class="line">                            cin &gt;&gt; p;</span><br><span class="line">                            for(int i=0;i&lt;5;i++)&#123;</span><br><span class="line">                                pai[i]=p[i];</span><br><span class="line">                            &#125;</span><br><span class="line">                            strcpy(tcc[choose_wei-1].chepai , pai);</span><br><span class="line">                            cout &lt;&lt; &quot;停车时间：&quot; &lt;&lt; endl;</span><br><span class="line">                            a.print();</span><br><span class="line">                            park m(a,1,choose_wei,pai,true);</span><br><span class="line">                            write.write((char*)&amp;m, sizeof(m));</span><br><span class="line">                            write.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                        else &#123;</span><br><span class="line">                            cout &lt;&lt; &quot;此车位已有车，请选择另一个车位&quot; &lt;&lt; endl;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (TYPE == 2) &#123;</span><br><span class="line">                    int h = 0;</span><br><span class="line">                    cout&lt;&lt;&quot;电动车的停车价格为：&quot;&lt;&lt;electric_price&lt;&lt;&quot;元/小时&quot;&lt;&lt;endl;</span><br><span class="line">                    while (h == 0) &#123;</span><br><span class="line">                        cout &lt;&lt; &quot;请在0-&quot; &lt;&lt; electric_sum &lt;&lt; &quot;之间选择您的车位号&quot; &lt;&lt; endl;</span><br><span class="line">                        cin &gt;&gt; choose_wei;</span><br><span class="line">                        if (tcc[car_sum+choose_wei-1].chepai[0] == &#x27;\0&#x27;) &#123;</span><br><span class="line">                            h = 1;</span><br><span class="line">                            cout &lt;&lt; &quot;请输入您的车牌号(4位数字)：&quot; &lt;&lt; endl;</span><br><span class="line">                            string p;</span><br><span class="line">                            cin &gt;&gt; p;</span><br><span class="line">                            for(int i=0;i&lt;5;i++)&#123;</span><br><span class="line">                                pai[i]=p[i];</span><br><span class="line">                            &#125;</span><br><span class="line">                            strcpy(tcc[car_sum+choose_wei-1].chepai , pai);</span><br><span class="line">                            cout &lt;&lt; &quot;停车时间：&quot; &lt;&lt; endl;</span><br><span class="line">                            a.print();</span><br><span class="line">                            park m(a,2,choose_wei,pai,true);</span><br><span class="line">                            write.write((char*)&amp;m, sizeof(m));</span><br><span class="line">                            write.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                        else &#123;</span><br><span class="line">                            cout &lt;&lt; &quot;此车位已有车，请选择另一个车位&quot; &lt;&lt; endl;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (TYPE == 3) &#123;</span><br><span class="line">                    int h = 0;</span><br><span class="line">                    cout&lt;&lt;&quot;货车的停车价格为：&quot;&lt;&lt;truck_price&lt;&lt;&quot;元/小时&quot;&lt;&lt;endl;</span><br><span class="line">                    cout &lt;&lt; &quot;请在0-&quot; &lt;&lt; truck_sum &lt;&lt; &quot;之间选择您的车位号&quot; &lt;&lt; endl;</span><br><span class="line">                    cin &gt;&gt; choose_wei;</span><br><span class="line">                    while(h==0)&#123;</span><br><span class="line">                        if (tcc[choose_wei+car_sum+electric_sum-1].chepai[0] == &#x27;\0&#x27;) &#123;</span><br><span class="line">                            h = 1;</span><br><span class="line">                            cout &lt;&lt; &quot;请输入您的车牌号(4位数字)：&quot; &lt;&lt; endl;</span><br><span class="line">                            string p;</span><br><span class="line">                            cin &gt;&gt; p;</span><br><span class="line">                            for(int i=0;i&lt;5;i++)&#123;</span><br><span class="line">                                pai[i]=p[i];</span><br><span class="line">                            &#125;</span><br><span class="line">                            cout &lt;&lt; &quot;请输入您的载货量(吨)：&quot; &lt;&lt; endl;</span><br><span class="line">                            cin &gt;&gt; Load;</span><br><span class="line">                            strcpy(tcc[car_sum+electric_sum+choose_wei-1].chepai,pai);</span><br><span class="line">                            cout &lt;&lt; &quot;停车时间：&quot; &lt;&lt; endl;</span><br><span class="line">                            a.print();</span><br><span class="line">                            park m(a,3,choose_wei,pai,true);</span><br><span class="line">                            write.write((char*)&amp;m, sizeof(m));</span><br><span class="line">                            write.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                        else &#123;</span><br><span class="line">                            cout &lt;&lt; &quot;此车位已有车，请选择另一个车位&quot; &lt;&lt; endl;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (flag == 3) &#123;</span><br><span class="line">                Time r;</span><br><span class="line">                cout &lt;&lt; &quot;请输入您要取车的车牌号(4位数字):&quot; &lt;&lt; endl;</span><br><span class="line">                string o;</span><br><span class="line">                cin &gt;&gt; o;</span><br><span class="line">                for(int i=0;i&lt;5;i++)&#123;</span><br><span class="line">                    pai[i]=o[i];</span><br><span class="line">                &#125;</span><br><span class="line">                time_t nowtime;</span><br><span class="line">                struct tm* p;</span><br><span class="line">                time(&amp;nowtime);</span><br><span class="line">                p = localtime(&amp;nowtime);</span><br><span class="line">                Time a(p-&gt;tm_year+1900,p-&gt;tm_mon+1,p-&gt;tm_mday,p-&gt;tm_hour,p-&gt;tm_min);</span><br><span class="line">                fstream write;</span><br><span class="line">                fstream read;</span><br><span class="line">                read.open(&quot;park.dat&quot;,ios::in|ios::binary);</span><br><span class="line">                if(!read) &#123;</span><br><span class="line">                    cout &lt;&lt; &quot;打开文件失败&quot; &lt;&lt;endl;</span><br><span class="line">                    read.close();</span><br><span class="line">                &#125;</span><br><span class="line">                park *park;</span><br><span class="line">                park= new class park [car_sum+electric_sum+truck_sum];</span><br><span class="line">                </span><br><span class="line">                int i=0;</span><br><span class="line">                while(read.read((char*)&amp;park[i],sizeof(park[i])))&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                read.close();</span><br><span class="line">                int j;</span><br><span class="line">                int hour=0;</span><br><span class="line">                int u=1;</span><br><span class="line">                for(j=0;j&lt;i;j++)&#123;</span><br><span class="line">                    if(judge_chepai(pai,park[j].chepai))&#123;</span><br><span class="line">                        u=0;</span><br><span class="line">                        r=park[j].t;</span><br><span class="line">                        hour=sum_time(park[j].t, a);</span><br><span class="line">                        for(int f=j;f&lt;i;f++)&#123;</span><br><span class="line">                            park[f]=park[f+1];</span><br><span class="line">                        &#125;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if(u==1)&#123;</span><br><span class="line">                    cout&lt;&lt;&quot;该停车场无该车&quot;&lt;&lt;endl;</span><br><span class="line">                &#125;</span><br><span class="line">                else&#123;</span><br><span class="line">                    int n=0;</span><br><span class="line">                    write.open(&quot;park.dat&quot;,ios::out|ios::binary);</span><br><span class="line">                    while(write.write((char*)&amp;park[n],sizeof(park[n]))&amp;&amp;n&lt;i-2)&#123;</span><br><span class="line">                        n++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    cout&lt;&lt;&quot;车牌号为&quot;&lt;&lt;pai&lt;&lt;&quot;的车&quot;&lt;&lt;endl;</span><br><span class="line">                    cout&lt;&lt;&quot;停车时间为：&quot;&lt;&lt;endl;</span><br><span class="line">                    r.print();</span><br><span class="line">                    cout&lt;&lt;&quot;取车时间为：&quot;&lt;&lt;endl;</span><br><span class="line">                    a.print();</span><br><span class="line">                    cout&lt;&lt;&quot;共停车&quot;&lt;&lt;hour&lt;&lt;&quot;小时&quot;&lt;&lt;endl;</span><br><span class="line">                    if(park[j].type==1)&#123;</span><br><span class="line">                        cout&lt;&lt;&quot;需缴费&quot;&lt;&lt;hour*car_price&lt;&lt;&quot;元&quot;&lt;&lt;endl;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(park[j].type==2)&#123;</span><br><span class="line">                        cout&lt;&lt;&quot;需缴费&quot;&lt;&lt;hour*electric_price&lt;&lt;&quot;元&quot;&lt;&lt;endl;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(park[j].type==3)&#123;</span><br><span class="line">                        cout&lt;&lt;&quot;需缴费&quot;&lt;&lt;hour*truck_price&lt;&lt;&quot;元&quot;&lt;&lt;endl;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                write.close();</span><br><span class="line">            &#125;</span><br><span class="line">            if(flag==4)&#123;</span><br><span class="line">                int s=0;</span><br><span class="line">                cout&lt;&lt;&quot;(1)按车牌号查找&quot;&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;&quot;(2)按车位号查找&quot;&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;&quot;请输入查找方式：&quot;&lt;&lt;endl;</span><br><span class="line">                cin&gt;&gt;s;</span><br><span class="line">                if(s==1)&#123;</span><br><span class="line">                    cout&lt;&lt;&quot;请输入您的车牌号：&quot;&lt;&lt;endl;</span><br><span class="line">                    string p;</span><br><span class="line">                    cin &gt;&gt; p;</span><br><span class="line">                    for(int i=0;i&lt;5;i++)&#123;</span><br><span class="line">                        pai[i]=p[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                    fstream read;</span><br><span class="line">                    read.open(&quot;park.dat&quot;,ios::in|ios::binary);</span><br><span class="line">                    if(!read) &#123;</span><br><span class="line">                        cout &lt;&lt; &quot;error&quot; &lt;&lt;endl;</span><br><span class="line">                        read.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    park *sum;</span><br><span class="line">                    sum= new park [car_sum+electric_sum+truck_sum];</span><br><span class="line">                    </span><br><span class="line">                    int i=0;</span><br><span class="line">                    while(read.read((char*)&amp;sum[i],sizeof(sum[i])))&#123;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    read.close();</span><br><span class="line">                    int j;</span><br><span class="line">                    int u=1;</span><br><span class="line">                    for(j=0;j&lt;i;j++)&#123;</span><br><span class="line">                        if(judge_chepai(pai,sum[j].chepai))&#123;</span><br><span class="line">                            u=0;</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(u==1)&#123;</span><br><span class="line">                        cout&lt;&lt;&quot;该停车场无该车&quot;&lt;&lt;endl;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else&#123;</span><br><span class="line">                        Time a;</span><br><span class="line">                        sum[j].print();</span><br><span class="line">                        cout&lt;&lt;&quot;停车时间：&quot;&lt;&lt;endl;</span><br><span class="line">                        a=sum[j].t;</span><br><span class="line">                        a.print();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if(s==2)&#123;</span><br><span class="line">                    int type;</span><br><span class="line">                    cout&lt;&lt;&quot;(1)轿车&quot;&lt;&lt;endl;</span><br><span class="line">                    cout&lt;&lt;&quot;(2)电动车&quot;&lt;&lt;endl;</span><br><span class="line">                    cout&lt;&lt;&quot;(3)卡车&quot;&lt;&lt;endl;</span><br><span class="line">                    cout&lt;&lt;&quot;请输入车的类型：&quot;&lt;&lt;endl;</span><br><span class="line">                    cin&gt;&gt;type;</span><br><span class="line">                    cout&lt;&lt;&quot;请输入您的车位号：&quot;&lt;&lt;endl;</span><br><span class="line">                    cin&gt;&gt;wei;</span><br><span class="line">                    fstream read;</span><br><span class="line">                    read.open(&quot;park.dat&quot;,ios::in|ios::binary);</span><br><span class="line">                    if(!read) &#123;</span><br><span class="line">                        cout &lt;&lt; &quot;error&quot; &lt;&lt;endl;</span><br><span class="line">                        read.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    park *sum;</span><br><span class="line">                    sum= new park [car_sum+electric_sum+truck_sum];</span><br><span class="line">                    </span><br><span class="line">                    int i=0;</span><br><span class="line">                    while(read.read((char*)&amp;sum[i],sizeof(sum[i])))&#123;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    read.close();</span><br><span class="line">                    int j;</span><br><span class="line">                    int u=1;</span><br><span class="line">                    for(j=0;j&lt;i;j++)&#123;</span><br><span class="line">                        if(wei==sum[j].chewei)&#123;</span><br><span class="line">                            u=0;</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(u==1)&#123;</span><br><span class="line">                        cout&lt;&lt;&quot;该停车场无该车&quot;&lt;&lt;endl;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else&#123;</span><br><span class="line">                        Time a;</span><br><span class="line">                        sum[j].print();</span><br><span class="line">                        cout&lt;&lt;&quot;停车时间：&quot;&lt;&lt;endl;</span><br><span class="line">                        a=sum[j].t;</span><br><span class="line">                        a.print();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(flag==5)&#123;</span><br><span class="line">                int i=0;</span><br><span class="line">                fstream read;</span><br><span class="line">                park o[car_sum+electric_sum+truck_sum];</span><br><span class="line">                read.open(&quot;park.dat&quot;,ios::in|ios::binary);</span><br><span class="line">                while(!read.eof())</span><br><span class="line">                &#123;</span><br><span class="line">                    read.read((char*)&amp;o[i],sizeof(o[i]));</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                int car_num=0;</span><br><span class="line">                int electric_num=0;</span><br><span class="line">                int truck_num=0;</span><br><span class="line">                for(int j=0;j&lt;i;j++)&#123;</span><br><span class="line">                    if(o[j].type==1)&#123;</span><br><span class="line">                        car_num++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(o[j].type==2)&#123;</span><br><span class="line">                        electric_num++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(o[j].type==3)&#123;</span><br><span class="line">                        truck_num++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                cout&lt;&lt;&quot;轿车&quot;&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;&quot;车位总数：&quot;&lt;&lt;car_sum&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;&quot;空余车位数量：&quot;&lt;&lt;car_sum-car_num&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;&quot;价格：&quot;&lt;&lt;car_price&lt;&lt;&quot;元/小时&quot;&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;&quot;电动车&quot;&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;&quot;车位数：&quot;&lt;&lt;electric_sum&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;&quot;空余车位数量：&quot;&lt;&lt;electric_sum-electric_num&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;&quot;价格：&quot;&lt;&lt;electric_price&lt;&lt;&quot;元/小时&quot;&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;&quot;货车&quot;&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;&quot;车位数：&quot;&lt;&lt;truck_sum&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;&quot;空余车位数量：&quot;&lt;&lt;truck_sum-truck_num&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;&quot;价格：&quot;&lt;&lt;truck_price&lt;&lt;&quot;元/小时&quot;&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">            if(flag==7)&#123;</span><br><span class="line">                int t;</span><br><span class="line">                cout&lt;&lt;&quot;(1)重置停车场&quot;&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;&quot;(2)重置车辆信息&quot;&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;&quot;请输入您想进行的操作：&quot;&lt;&lt;endl;</span><br><span class="line">                cin&gt;&gt;t;</span><br><span class="line">                if(t==1)&#123;</span><br><span class="line">                    fstream a;</span><br><span class="line">                    fstream b;</span><br><span class="line">                    a.open(&quot;park.dat&quot;,ios::out);</span><br><span class="line">                    b.open(&quot;chang.dat&quot;,ios::out);</span><br><span class="line">                    if(!a)&#123;</span><br><span class="line">                        cout&lt;&lt;&quot;error&quot;&lt;&lt;endl;</span><br><span class="line">                        exit(0);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(!b)&#123;</span><br><span class="line">                        cout&lt;&lt;&quot;error&quot;&lt;&lt;endl;</span><br><span class="line">                        exit(0);</span><br><span class="line">                    &#125;</span><br><span class="line">                    b.close();</span><br><span class="line">                    a.close();</span><br><span class="line">                &#125;</span><br><span class="line">                if(t==2)&#123;</span><br><span class="line">                    fstream a;</span><br><span class="line">                    a.open(&quot;park.dat&quot;,ios::out);</span><br><span class="line">                    if(!a)&#123;</span><br><span class="line">                        cout&lt;&lt;&quot;error&quot;&lt;&lt;endl;</span><br><span class="line">                        exit(0);</span><br><span class="line">                    &#125;</span><br><span class="line">                    a.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">一个极其简陋的停车场管理系统</summary>
    
    
    
    <category term="项目" scheme="https://xadmc.gitee.io/stouyx/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="C++" scheme="https://xadmc.gitee.io/stouyx/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>运算符重载</title>
    <link href="https://xadmc.gitee.io/stouyx/2023/05/08/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <id>https://xadmc.gitee.io/stouyx/2023/05/08/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</id>
    <published>2023-05-08T10:32:04.000Z</published>
    <updated>2023-05-11T04:29:16.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="不能重载的运算符："><a href="#不能重载的运算符：" class="headerlink" title="不能重载的运算符："></a>不能重载的运算符：</h2><img src="https://www.helloimg.com/images/2023/05/09/oxnnSP.png" width="100%" height="100%"><h2 id="赋值运算符重载"><a href="#赋值运算符重载" class="headerlink" title="赋值运算符重载"></a>赋值运算符重载</h2><p>模板为 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">people operator = (const people &amp; a)</span><br><span class="line">&#123;</span><br><span class="line">delete [] char*;</span><br><span class="line">赋值；</span><br><span class="line">return *this</span><br><span class="line">&#125;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;sstream&gt;</span><br><span class="line">class HugeInteger&#123;</span><br><span class="line">public:</span><br><span class="line">HugeInteger&amp; operator=(const HugeInteger &amp;h);</span><br><span class="line">private:</span><br><span class="line">    string str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">HugeInteger&amp; HugeInteger::operator=(const HugeInteger &amp;h)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;str=h.str;</span><br><span class="line">    return *this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算术运算符的重载"><a href="#算术运算符的重载" class="headerlink" title="算术运算符的重载"></a>算术运算符的重载</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">people operator + (const people &amp; a)</span><br><span class="line">&#123;</span><br><span class="line">people b;</span><br><span class="line">b.r=r+a.r;</span><br><span class="line">return b;</span><br><span class="line">&#125;</span><br><span class="line">+、++、–、- -、+=、-=、/、*</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class complex&#123;</span><br><span class="line">public:</span><br><span class="line">    complex(double r=0,double i=0)&#123;</span><br><span class="line">        this-&gt;r=r;</span><br><span class="line">        this-&gt;i=i;</span><br><span class="line">    &#125;</span><br><span class="line">    complex operator+(complex&amp;);</span><br><span class="line">    complex operator-(complex&amp;);</span><br><span class="line">    complex operator+=(complex&amp;);</span><br><span class="line">private:</span><br><span class="line">    double r, i;</span><br><span class="line">&#125;;</span><br><span class="line">complex complex::operator+(complex &amp;c)&#123;</span><br><span class="line">    return complex(r+c.r,i+c.i);</span><br><span class="line">&#125;</span><br><span class="line">complex complex::operator-(complex &amp;c)&#123;</span><br><span class="line">    return complex(r-c.r,i-c.i);</span><br><span class="line">&#125;</span><br><span class="line">complex complex::operator+=(complex &amp;c)&#123;</span><br><span class="line">    r+=c.r;</span><br><span class="line">    i+=c.i;</span><br><span class="line">    return *this;//return complex(r,i)亦可</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关系运算符的重载"><a href="#关系运算符的重载" class="headerlink" title="关系运算符的重载"></a>关系运算符的重载</h2><p>模板为 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">bool people:: operator == (const people &amp;a)</span><br><span class="line">&#123;</span><br><span class="line">if()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt; </span><br><span class="line">#include &lt;cstring&gt; </span><br><span class="line">using namespace std;</span><br><span class="line">class String</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">    string str;   </span><br><span class="line">public:</span><br><span class="line">String(string s)&#123;str=s;&#125;</span><br><span class="line">friend bool operator&gt;(const String &amp;st1, const String &amp;st2);</span><br><span class="line">friend bool operator==(const String &amp;st, const String &amp;st2);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bool operator&gt;(const String &amp;st1, const String &amp;st2)</span><br><span class="line">&#123;</span><br><span class="line">    return (std::strcmp(st1.str, st2.str) &gt; 0);</span><br><span class="line">&#125;</span><br><span class="line">bool operator==(const String &amp;st1, const String &amp;st2)</span><br><span class="line">&#123;</span><br><span class="line">    return (std::strcmp(st1.str, st2.str) == 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单目运算符："><a href="#单目运算符：" class="headerlink" title="单目运算符："></a>单目运算符：</h2><p>单目运算符只作用于当前对象所以不需要传参<br>前置++：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">people operator ++ ()</span><br><span class="line">&#123;</span><br><span class="line">++r;</span><br><span class="line">return *this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后置++：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">people operator ++ (int)</span><br><span class="line">&#123;</span><br><span class="line">people a(r);    用当前对象的数据初始化a</span><br><span class="line"></span><br><span class="line">a.r++;</span><br><span class="line">return a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>在这里给出重载&lt;&lt;,&gt;&gt;,[]的方法<br>模板：<br>(1)cout&lt;&lt;：<br>friend ostream &amp;operator&lt;&lt;(ostream &amp;cout，const classname&amp; 实例对象) &#x2F; ostream &amp;operator&lt;&lt;(ostream &amp;cout)<br>(2)cin&gt;&gt;：friend istream &amp;operator&gt;&gt;(istream &amp;cin，classname&amp; 实例对象) &#x2F; istream &amp;operator&gt;&gt;(istream &amp;cin)<br>(3)[ ]：typename &amp; operator[ ] (形参表)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt; </span><br><span class="line">#include &lt;cstring&gt; </span><br><span class="line">using namespace std;</span><br><span class="line">class String</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">    string str;   </span><br><span class="line">public:</span><br><span class="line">String(string s)&#123;str=s;&#125;</span><br><span class="line">char &amp; operator[](int i);</span><br><span class="line">friend ostream &amp; operator&lt;&lt;(ostream &amp; cout, const String &amp; st);</span><br><span class="line">    friend istream &amp; operator&gt;&gt;(istream &amp; cin, String &amp; st);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">char &amp;String::operator[](int i)</span><br><span class="line">&#123;</span><br><span class="line">    return str[i];</span><br><span class="line">&#125;</span><br><span class="line">ostream &amp;operator&lt;&lt;(ostream &amp; cout, const String &amp;st)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; st.str;</span><br><span class="line">    return cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">istream &amp;operator&gt;&gt;(istream &amp; cin, String &amp;st)</span><br><span class="line">&#123;</span><br><span class="line">    char temp[40];</span><br><span class="line">    is.get(temp, 40);</span><br><span class="line">    if (cin)</span><br><span class="line">        st = temp;</span><br><span class="line">    while (cin &amp;&amp; cin.get() != &#x27;\n&#x27;)</span><br><span class="line">        continue;</span><br><span class="line">    return cin;</span><br><span class="line">&#125;</span><br><span class="line">istream&amp; operator&gt;&gt;(istream&amp; ins,_Point&amp; target)</span><br><span class="line">&#123;</span><br><span class="line">        //输入到两个变量里面</span><br><span class="line">        ins&gt;&gt;target.x&gt;&gt;target.y;</span><br><span class="line">        return ins;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">各种运算符的重载</summary>
    
    
    
    <category term="语法" scheme="https://xadmc.gitee.io/stouyx/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="C++" scheme="https://xadmc.gitee.io/stouyx/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>静态成员函数</title>
    <link href="https://xadmc.gitee.io/stouyx/2023/05/08/%E9%9D%99%E6%80%81%E6%88%90%E5%91%98/"/>
    <id>https://xadmc.gitee.io/stouyx/2023/05/08/%E9%9D%99%E6%80%81%E6%88%90%E5%91%98/</id>
    <published>2023-05-08T07:32:04.000Z</published>
    <updated>2023-05-11T04:29:09.277Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>静态成员函数的声明也很简单，就是在类的成员函数前加上static关键字即可，和静态成员一样，静态成员函数也是属于类的，它并不属于任何对象，当调用静态成员函数时应该使用类名和域运算符“∷”，当然也可以使用对象调用操作，但是这样的操作并不意味着静态成员函数属于这个对象，它只是被这个对象共享而已，这样也就决定了静态成员函数中是不能访问本类中的非静态数据成员的，它是不能访问非静态数据成员的，在c++中静态成员函数主要用来访问静态数据成员而不访问非静态数据成员</p><p>ps：<br>static int count()<br>name.count()<br>不表示count()属于name</p><p>1.静态成员函数不能调用非静态成员函数，但是反过来是可以的</p><p>2.静态成员函数没有this指针，也就是说静态成员函数不能使用修饰符(也就是函数后面的const关键字)</p><p>3.静态成员函数的地址可用普通函数指针储存，而普通成员函数地址需要用 类成员函数指针来储存。</p><p>总结：其实声明为静态，不论是静态数据成员还是静态成员函数，它们都是不依赖于对象而存在的，类在定义后并不分配存储空间，而是在定义类的对象的时候才分配存储空间，相反静态的数据成员和静态的成员函数是已经在内存中开辟了内存空间了，所以静态数据成员可以独立的访问在任何类对象没有建立起来都可以访问，并且静态成员函数不可以调用非静态成员函数，因为非静态成员函数只有在类对象建立以后才可以调用，相反则是可以的。<br><img src="https://www.helloimg.com/images/2023/05/09/oxnXZC.png" width="100%" height="100%"></p><h2 id="静态数据成员"><a href="#静态数据成员" class="headerlink" title="静态数据成员"></a>静态数据成员</h2><p>对象的成员函数（没有static的成员函数）内部，可以直接访问“静态数据成员”<br>类的静态成员函数（有static的成员函数）内部，可以直接访问“静态数据成员”<br>即：所有的成员函数，都可以访问静态数据成员。<br>类不能直接访问普通的静态数据成员（Human::humanCount 非法）</p><h2 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h2><p>对象可以直接访问静态成员函数<br>类可以直接访问静态成员函数（Human::getHumanCount()）<br>在类的静态成员函数（类的静态方法）内部，不能直接访问this指针和对象的数据成员！<br>在类的静态成员函数（类的静态方法）内部，只能访问类的数据成员</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">//定义Student类</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">class Student                  </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">//定义构造函数</span><br><span class="line">Student(int n,int a,float s):num(n),age(a),score(s)&#123; &#125;      </span><br><span class="line">void total();</span><br><span class="line">//声明静态成员函数</span><br><span class="line">static float average();      </span><br><span class="line">private:</span><br><span class="line">    int num;</span><br><span class="line">    int age;</span><br><span class="line">    float score;</span><br><span class="line">    //静态数据成员，累计学生的总分</span><br><span class="line">    static float sum; </span><br><span class="line">    //静态数据成员，累计学生的人数</span><br><span class="line">    static int count;           </span><br><span class="line">&#125;;</span><br><span class="line">//在全局作用域对静态数据成员初始化，如果不赋予初值，则使用其默认值零</span><br><span class="line">float Student::sum;                     </span><br><span class="line">int Student::count;</span><br><span class="line">//定义非静态成员函数</span><br><span class="line">void Student::total()                    </span><br><span class="line">&#123;</span><br><span class="line">    //累加总分</span><br><span class="line">    sum+=score;</span><br><span class="line">    //累计已统计的人数</span><br><span class="line">    count++;                               </span><br><span class="line">&#125;</span><br><span class="line">//定义静态成员函数</span><br><span class="line">float  Student::average()                  </span><br><span class="line">&#123;</span><br><span class="line">    return(sum/count);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Student stud[3]=&#123;    </span><br><span class="line">    //定义对象数组并初始化</span><br><span class="line">    Student(1001,18,70),</span><br><span class="line">    Student(1002,19,78),</span><br><span class="line">    Student(1005,20,98)</span><br><span class="line">&#125;;</span><br><span class="line">int n;</span><br><span class="line">std::cout&lt;&lt;&quot;please input the number of students: &quot;;</span><br><span class="line"> //输入需要求前面多少名学生的平均成绩</span><br><span class="line">std::cin&gt;&gt;n;                              </span><br><span class="line">//调用3次total函数</span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    stud[i].total();</span><br><span class="line">&#125;</span><br><span class="line">//调用静态成员函数</span><br><span class="line">std::cout&lt;&lt;&quot;the average score of &quot;&lt;&lt;n&lt;&lt;&quot; students is &quot;&lt;&lt;Student::average( )&lt;&lt;std::endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">静态数据成员与静态成员函数</summary>
    
    
    
    <category term="语法" scheme="https://xadmc.gitee.io/stouyx/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="C++" scheme="https://xadmc.gitee.io/stouyx/tags/C/"/>
    
  </entry>
  
</feed>
