<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>静态成员函数</title>
    <url>/Stouyx/2023/05/08/%E9%9D%99%E6%80%81%E6%88%90%E5%91%98/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>静态成员函数的声明也很简单，就是在类的成员函数前加上static关键字即可，和静态成员一样，静态成员函数也是属于类的，它并不属于任何对象，当调用静态成员函数时应该使用类名和域运算符“∷”，当然也可以使用对象调用操作，但是这样的操作并不意味着静态成员函数属于这个对象，它只是被这个对象共享而已，这样也就决定了静态成员函数中是不能访问本类中的非静态数据成员的，它是不能访问非静态数据成员的，在c++中静态成员函数主要用来访问静态数据成员而不访问非静态数据成员</p>
<p>ps：<br>static int count()<br>name.count()<br>不表示count()属于name</p>
<p>1.静态成员函数不能调用非静态成员函数，但是反过来是可以的</p>
<p>2.静态成员函数没有this指针，也就是说静态成员函数不能使用修饰符(也就是函数后面的const关键字)</p>
<p>3.静态成员函数的地址可用普通函数指针储存，而普通成员函数地址需要用 类成员函数指针来储存。</p>
<p>总结：其实声明为静态，不论是静态数据成员还是静态成员函数，它们都是不依赖于对象而存在的，类在定义后并不分配存储空间，而是在定义类的对象的时候才分配存储空间，相反静态的数据成员和静态的成员函数是已经在内存中开辟了内存空间了，所以静态数据成员可以独立的访问在任何类对象没有建立起来都可以访问，并且静态成员函数不可以调用非静态成员函数，因为非静态成员函数只有在类对象建立以后才可以调用，相反则是可以的。<br><img src="/Stouyx/stouyx/2023/05/08/%E9%9D%99%E6%80%81%E6%88%90%E5%91%98/1.png"></p>
<h2 id="静态数据成员"><a href="#静态数据成员" class="headerlink" title="静态数据成员"></a>静态数据成员</h2><p>对象的成员函数（没有static的成员函数）内部，可以直接访问“静态数据成员”<br>类的静态成员函数（有static的成员函数）内部，可以直接访问“静态数据成员”<br>即：所有的成员函数，都可以访问静态数据成员。<br>类不能直接访问普通的静态数据成员（Human::humanCount 非法）</p>
<h2 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h2><p>对象可以直接访问静态成员函数<br>类可以直接访问静态成员函数（Human::getHumanCount()）<br>在类的静态成员函数（类的静态方法）内部，不能直接访问this指针和对象的数据成员！<br>在类的静态成员函数（类的静态方法）内部，只能访问类的数据成员</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//定义Student类</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">class Student                  </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">//定义构造函数</span><br><span class="line">Student(int n,int a,float s):num(n),age(a),score(s)&#123; &#125;      </span><br><span class="line">void total();</span><br><span class="line">//声明静态成员函数</span><br><span class="line">static float average();      </span><br><span class="line">private:</span><br><span class="line">    int num;</span><br><span class="line">    int age;</span><br><span class="line">    float score;</span><br><span class="line">    //静态数据成员，累计学生的总分</span><br><span class="line">    static float sum; </span><br><span class="line">    //静态数据成员，累计学生的人数</span><br><span class="line">    static int count;           </span><br><span class="line">&#125;;</span><br><span class="line">//在全局作用域对静态数据成员初始化，如果不赋予初值，则使用其默认值零</span><br><span class="line">float Student::sum;                     </span><br><span class="line">int Student::count;</span><br><span class="line">//定义非静态成员函数</span><br><span class="line">void Student::total()                    </span><br><span class="line">&#123;</span><br><span class="line">    //累加总分</span><br><span class="line">    sum+=score;</span><br><span class="line">    //累计已统计的人数</span><br><span class="line">    count++;                               </span><br><span class="line">&#125;</span><br><span class="line">//定义静态成员函数</span><br><span class="line">float  Student::average()                  </span><br><span class="line">&#123;</span><br><span class="line">    return(sum/count);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Student stud[3]=&#123;    </span><br><span class="line">    //定义对象数组并初始化</span><br><span class="line">    Student(1001,18,70),</span><br><span class="line">    Student(1002,19,78),</span><br><span class="line">    Student(1005,20,98)</span><br><span class="line">&#125;;</span><br><span class="line">int n;</span><br><span class="line">std::cout&lt;&lt;&quot;please input the number of students: &quot;;</span><br><span class="line"> //输入需要求前面多少名学生的平均成绩</span><br><span class="line">std::cin&gt;&gt;n;                              </span><br><span class="line">//调用3次total函数</span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    stud[i].total();</span><br><span class="line">&#125;</span><br><span class="line">//调用静态成员函数</span><br><span class="line">std::cout&lt;&lt;&quot;the average score of &quot;&lt;&lt;n&lt;&lt;&quot; students is &quot;&lt;&lt;Student::average( )&lt;&lt;std::endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>运算符重载</title>
    <url>/Stouyx/2023/05/08/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="不能重载的运算符："><a href="#不能重载的运算符：" class="headerlink" title="不能重载的运算符："></a>不能重载的运算符：</h2><p><img src="/Stouyx/stouyx/2023/05/08/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/2.png" alt="图片"></p>
<h2 id="赋值运算符重载"><a href="#赋值运算符重载" class="headerlink" title="赋值运算符重载"></a>赋值运算符重载</h2><p>模板为 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">people operator = (const people &amp; a)</span><br><span class="line">&#123;</span><br><span class="line">	delete [] char*;</span><br><span class="line">	赋值；</span><br><span class="line">	return *this</span><br><span class="line">&#125;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;sstream&gt;</span><br><span class="line">class HugeInteger&#123;</span><br><span class="line">public:</span><br><span class="line">	HugeInteger&amp; operator=(const HugeInteger &amp;h);</span><br><span class="line">private:</span><br><span class="line">    string str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">HugeInteger&amp; HugeInteger::operator=(const HugeInteger &amp;h)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;str=h.str;</span><br><span class="line">    return *this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="算术运算符的重载"><a href="#算术运算符的重载" class="headerlink" title="算术运算符的重载"></a>算术运算符的重载</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">people operator + (const people &amp; a)</span><br><span class="line">&#123;</span><br><span class="line">	people b;</span><br><span class="line">	b.r=r+a.r;</span><br><span class="line">	return b;</span><br><span class="line">&#125;</span><br><span class="line">+、++、–、- -、+=、-=、/、*</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class complex&#123;</span><br><span class="line">public:</span><br><span class="line">    complex(double r=0,double i=0)&#123;</span><br><span class="line">        this-&gt;r=r;</span><br><span class="line">        this-&gt;i=i;</span><br><span class="line">    &#125;</span><br><span class="line">    complex operator+(complex&amp;);</span><br><span class="line">    complex operator-(complex&amp;);</span><br><span class="line">    complex operator+=(complex&amp;);</span><br><span class="line">private:</span><br><span class="line">    double r, i;</span><br><span class="line">&#125;;</span><br><span class="line">complex complex::operator+(complex &amp;c)&#123;</span><br><span class="line">    return complex(r+c.r,i+c.i);</span><br><span class="line">&#125;</span><br><span class="line">complex complex::operator-(complex &amp;c)&#123;</span><br><span class="line">    return complex(r-c.r,i-c.i);</span><br><span class="line">&#125;</span><br><span class="line">complex complex::operator+=(complex &amp;c)&#123;</span><br><span class="line">    r+=c.r;</span><br><span class="line">    i+=c.i;</span><br><span class="line">    return *this;//return complex(r,i)亦可</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="关系运算符的重载"><a href="#关系运算符的重载" class="headerlink" title="关系运算符的重载"></a>关系运算符的重载</h2><p>模板为 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool people:: operator == (const people &amp;a)</span><br><span class="line">&#123;</span><br><span class="line">	if()</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt; </span><br><span class="line">#include &lt;cstring&gt; </span><br><span class="line">using namespace std;</span><br><span class="line">class String</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">    string str;   </span><br><span class="line">public:</span><br><span class="line">	String(string s)&#123;str=s;&#125;</span><br><span class="line">	friend bool operator&gt;(const String &amp;st1, const String &amp;st2);</span><br><span class="line">	friend bool operator==(const String &amp;st, const String &amp;st2);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bool operator&gt;(const String &amp;st1, const String &amp;st2)</span><br><span class="line">&#123;</span><br><span class="line">    return (std::strcmp(st1.str, st2.str) &gt; 0);</span><br><span class="line">&#125;</span><br><span class="line">bool operator==(const String &amp;st1, const String &amp;st2)</span><br><span class="line">&#123;</span><br><span class="line">    return (std::strcmp(st1.str, st2.str) == 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单目运算符："><a href="#单目运算符：" class="headerlink" title="单目运算符："></a>单目运算符：</h2><p>单目运算符只作用于当前对象所以不需要传参<br>前置++：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">people operator ++ ()</span><br><span class="line">&#123;</span><br><span class="line">	++r;</span><br><span class="line">	return *this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后置++：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">people operator ++ (int)</span><br><span class="line">&#123;</span><br><span class="line">	people a(r);    用当前对象的数据初始化a</span><br><span class="line">	</span><br><span class="line">	a.r++;</span><br><span class="line">	return a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>在这里给出重载&lt;&lt;,&gt;&gt;,[]的方法<br>模板：<br>(1)cout&lt;&lt;：<br>friend ostream &amp;operator&lt;&lt;(ostream &amp;cout，const classname&amp; 实例对象) &#x2F; ostream &amp;operator&lt;&lt;(ostream &amp;cout)<br>(2)cin&gt;&gt;：friend istream &amp;operator&gt;&gt;(istream &amp;cin，classname&amp; 实例对象) &#x2F; istream &amp;operator&gt;&gt;(istream &amp;cin)<br>(3)[ ]：typename &amp; operator[ ] (形参表)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt; </span><br><span class="line">#include &lt;cstring&gt; </span><br><span class="line">using namespace std;</span><br><span class="line">class String</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">    string str;   </span><br><span class="line">public:</span><br><span class="line">	String(string s)&#123;str=s;&#125;</span><br><span class="line">	char &amp; operator[](int i);</span><br><span class="line">	friend ostream &amp; operator&lt;&lt;(ostream &amp; cout, const String &amp; st);</span><br><span class="line">    friend istream &amp; operator&gt;&gt;(istream &amp; cin, String &amp; st);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">char &amp;String::operator[](int i)</span><br><span class="line">&#123;</span><br><span class="line">    return str[i];</span><br><span class="line">&#125;</span><br><span class="line">ostream &amp;operator&lt;&lt;(ostream &amp; cout, const String &amp;st)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; st.str;</span><br><span class="line">    return cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">istream &amp;operator&gt;&gt;(istream &amp; cin, String &amp;st)</span><br><span class="line">&#123;</span><br><span class="line">    char temp[40];</span><br><span class="line">    is.get(temp, 40);</span><br><span class="line">    if (cin)</span><br><span class="line">        st = temp;</span><br><span class="line">    while (cin &amp;&amp; cin.get() != &#x27;\n&#x27;)</span><br><span class="line">        continue;</span><br><span class="line">    return cin;</span><br><span class="line">&#125;</span><br><span class="line">istream&amp; operator&gt;&gt;(istream&amp; ins,_Point&amp; target)</span><br><span class="line">&#123;</span><br><span class="line">        //输入到两个变量里面</span><br><span class="line">        ins&gt;&gt;target.x&gt;&gt;target.y;</span><br><span class="line">        return ins;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
